{"remainingRequest":"/Users/jerry/Documents/scratch3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jerry/Documents/scratch3/src/components/searchBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jerry/Documents/scratch3/src/components/searchBar.vue","mtime":1576653422705},{"path":"/Users/jerry/Documents/scratch3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Documents/scratch3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jerry/Documents/scratch3/node_modules/vuetify-loader/lib/loader.js","mtime":1564062720000},{"path":"/Users/jerry/Documents/scratch3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Documents/scratch3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n    props: ['searchPlaceholder','search-lists'],\n    data() {\n        return {\n            drawerStatus: false,\n            searchQuery:'',\n            isHidden: true,\n            searchStatus: false\n        }\n    },\n    computed: {\n        filteredResources (){\n            if(this.searchQuery){\n                return this.searchLists.filter((item)=>{\n                    return item.title.includes(this.searchQuery);\n            })\n            }else{\n                return this.searchLists;\n            }\n        }\n    },\n    methods: {\n        search: function(){\n            this.$router.push({path: this.$route.path , query: {search: this.searchQuery} });\n        }\n    }\n}\n",{"version":3,"sources":["searchBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"searchBar.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\n#app(@click='searchStatus=false')\n    .input-group\n        input.search(type='text' :placeholder='searchPlaceholder' v-model='searchQuery' @keyup.enter=\"searchButton\" :blur='searchStatus=true')\n        button.searchButton(v-on:click=\"isHidden=false\" @click=\"search\")\n            i.mdi.mdi-magnify(aria-hidden='true')\n        .search-previewBlock(v-if='searchStatus')\n            .search-preview(v-if=\"searchQuery\" v-for='(item,index) in filteredResources' :key=\"index\")\n                        md-card(md-with-hover='' )\n                            md-ripple\n                                a#myhref(:href='item.link')\n                                    md-card-header()\n                                        .sm-title {{item.title}}\n\n\n</template>\n\n<script>\n\nexport default {\n    props: ['searchPlaceholder','search-lists'],\n    data() {\n        return {\n            drawerStatus: false,\n            searchQuery:'',\n            isHidden: true,\n            searchStatus: false\n        }\n    },\n    computed: {\n        filteredResources (){\n            if(this.searchQuery){\n                return this.searchLists.filter((item)=>{\n                    return item.title.includes(this.searchQuery);\n            })\n            }else{\n                return this.searchLists;\n            }\n        }\n    },\n    methods: {\n        search: function(){\n            this.$router.push({path: this.$route.path , query: {search: this.searchQuery} });\n        }\n    }\n}\n</script>\n\n<style lang=\"sass\">\n@import \"@/style/common.sass\"\n\n</style>\n\n"]}]}